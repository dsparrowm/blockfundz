generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  email              String    @unique
  password           String
  mainBalance        Float?    @default(0.0)
  useCalculatedBalance Boolean @default(true)  // Use calculated vs manual balance
  availableBalance   Float?
  name               String
  phone              String?
  verificationToken  String?
  verificationTokenExpiresAt  DateTime?
  isVerified         Boolean? @default(false)
  withdrawalPin      Int?
  resetPasswordToken String?
  resetPasswordTokenExpiresAt DateTime?
  bitcoinBalance     Float     @default(0.0)
  ethereumBalance    Float     @default(0.0)
  usdtBalance        Float     @default(0.0)
  usdcBalance        Float     @default(0.0)
  transactions       Transaction[]
  investmentPlan     InvestmentPlan?
  withdrawalRequests WithdrawalRequest[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Chat system relations
  sentMessages       ChatMessage[] @relation("SentMessages")
  receivedMessages   ChatMessage[] @relation("ReceivedMessages")
  conversations      Conversation[] @relation("UserConversations")
  adminConversations Conversation[] @relation("AdminConversations")
  onlineStatus       OnlineStatus?
}

model Transaction {
  id          Int       @id @default(autoincrement())
  type        TransactionType
  asset       AssetType
  amount      Float
  status      TransactionStatus
  date        DateTime  @default(now())
  details     String?
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String?
  phone       String?
  planName    String?
  planId      Int?
  plan        InvestmentPlan? @relation(fields: [planId], references: [id], onDelete: SetNull)
  lastInterestCalculation DateTime? @default(now())
}

model InvestmentPlan {
  id            Int       @id @default(autoincrement())
  plan          String
  minimumAmount Int
  maximumAmount Int
  interestRate  Float
  totalReturns  Int
  userId        Int?       @unique
  user          User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model WithdrawalRequest {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Float
  asset       AssetType
  network     String
  address     String?
  status      RequestStatus
  createdAt   DateTime  @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  SUBSCRIPTION
}

enum AssetType {
  BITCOIN
  ETHEREUM
  USDT
  USDC
}

enum TransactionStatus {
  PENDING
  COMPLETED
  ACTIVE
  INACTIVE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model CryptoPrice {
  id        Int      @id @default(autoincrement())
  symbol    String   @unique  // BTC, ETH, etc.
  price     Float    // Price in USD
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Chat System Models
model Conversation {
  id          String        @id @default(cuid())
  userId      Int
  adminId     Int
  user        User          @relation("UserConversations", fields: [userId], references: [id], onDelete: Cascade)
  admin       User          @relation("AdminConversations", fields: [adminId], references: [id], onDelete: Cascade)
  messages    ChatMessage[]
  lastMessage String?
  lastMessageAt DateTime?
  unreadCount Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@unique([userId, adminId])
  @@index([userId])
  @@index([adminId])
  @@index([lastMessageAt])
}

model ChatMessage {
  id             String       @id @default(cuid())
  content        String
  senderId       Int
  recipientId    Int
  conversationId String
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipient      User         @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  isRead         Boolean      @default(false)
  messageType    MessageType  @default(TEXT)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@index([conversationId])
  @@index([senderId])
  @@index([recipientId])
  @@index([createdAt])
}

model OnlineStatus {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isOnline     Boolean  @default(false)
  lastSeen     DateTime @default(now())
  socketId     String?
  updatedAt    DateTime @updatedAt
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}